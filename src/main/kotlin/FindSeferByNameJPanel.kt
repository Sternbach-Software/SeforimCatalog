import java.awt.Font
import java.awt.event.KeyEvent
import java.awt.event.KeyListener
import java.util.*
import javax.swing.*
import javax.swing.table.AbstractTableModel
import javax.swing.table.TableRowSorter


/**
 *
 * @author shmue
 */
class FindSeferByNameJPanel : JPanel() {
    val objects: MutableList<CatalogEntry> = Catalog.objects.toMutableList()
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="expanded" desc="Generated Code">                          
    private fun initComponents() {
        jLabel1 = JLabel()
        seferNameTextField = JTextField()
        jScrollPane1 = JScrollPane()
        table = JTable()
        jLabel1!!.text = "Name of sefer:"
        table!!.model = catalogModel()
        table!!.font = Font("Default", 0, 14)
        jScrollPane1!!.setViewportView(table)
        seferNameTextField!!.addKeyListener( object : KeyListener {
            override fun keyTyped(e: KeyEvent?) {
            }

            override fun keyPressed(e: KeyEvent?) {
            }

            override fun keyReleased(e: KeyEvent?) {

                val constraint = seferNameTextField!!.text
                println("Key released, constraint=$constraint, list size: ${objects.size}")
                val newList = Collections.synchronizedList(mutableListOf<CatalogEntry>())
                Catalog
                    .objects
                    .parallelStream()
                    .filter { it.seferName.contains(constraint) }
                    .forEach { newList.add(it) }
                objects.clear()
                objects.addAll(newList)
                (table!!.model as AbstractTableModel).fireTableDataChanged()
                println("List updated, size: ${objects.size}")
            }
        }

        )
//        table!!.autoCreateRowSorter = true
        val rowSorter = TableRowSorter(table!!.model as AbstractTableModel)
        val comparator = kotlin.Comparator<String> { o1, o2 ->
            val o1ContainsEnglish = Catalog.containsEnglish(o1)
            val o2ContainsEnglish = Catalog.containsEnglish(o2)
            if (o1ContainsEnglish && !o2ContainsEnglish) 1
            else if(!o1ContainsEnglish && o2ContainsEnglish) -1
            else o1.compareTo(o2)
        }
        rowSorter.setComparator(1, comparator)
        table!!.rowSorter = rowSorter
        val sortList = ArrayList<RowSorter.SortKey>()
        sortList.add(RowSorter.SortKey(1, SortOrder.ASCENDING))
        rowSorter.sortKeys = sortList

        val layout = GroupLayout(this)
        setLayout(layout)
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE.toInt())
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(seferNameTextField)
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(
                                    seferNameTextField,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE.toInt())
                        .addContainerGap()
                )
        )
    } // </editor-fold>

    private fun catalogModel() = object : AbstractTableModel() {
        val columns = arrayOf(
            "Shelf", "Name", "Author", "Publisher", "Volume", "Copies", "Category"
        )
        override fun getColumnName(col: Int): String {
            return columns[col]
        }

        override fun getRowCount(): Int {
            return objects.size
        }

        override fun getColumnCount(): Int {
            return columns.size
        }

        override fun getValueAt(row: Int, col: Int): Any {
            return objects[row].let {
                when(col) {
                    0 ->  it.shelfNum
                    1 ->  it.seferName
                    2 ->  it.author
                    3 ->  it.publisher
                    4 ->  it.volumeNum
                    5 ->  it.numCopies
                    6 ->  it.category
                    else -> TODO("This should not have happened: getValueAt($row:, $col)")
                }
            }
        }

        override fun isCellEditable(row: Int, col: Int): Boolean {
            return false
        }
    }

    // Variables declaration - do not modify                     
    private var jLabel1: JLabel? = null
    private var jScrollPane1: JScrollPane? = null
    private var seferNameTextField: JTextField? = null
    private var table: JTable? = null // End of variables declaration                   

    /**
     * Creates new form FindSeferByName
     */
    init {
        initComponents()
    }
}